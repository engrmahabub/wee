;---------------------------------
; Demo composite types
;---------------------------------
#driver "ct"

; enumration is a type 
def Enum <: {first:1, second, third} 

; print enumeration members
put (Enum.first) ; 1
put (Enum.second); 2
put (Enum.third) ; 3

write

; define hash map variable
let s: {A:N} 

; assign (name:value) pairs
set s := 
  {"first" : 10, 
   "secont": 20,
   "third" : 30
  }.

put(s["first"]); 'a'
put(s["second"]); 20
put(s["third"]); 30

write

; array with capacity
let v1 <: [Z](10)  ;vector of 10 integer elements
let v2 <: [R](2,3) ;matrix of 2 rows and 3 columns

; dynamic set / map collections
let p <: {A}    ;set collection of ASCII characters
let m <: {R,S}  ;hash map of strings with real key

; Establish map using literals
set m := {'a':1, 'b':2, 'c':3}

; complex list examples
let q1 <: [A]        ; a list of characters
let q2 <: [R]        ; a list of real numbers
let q3 <: [[A]]      ; a list of lists of characters
let q4 <: [[A](10)]  ; a list of array with capacity 10

; Array & Matrix literals
let l2 := [1,2,3] ; short list of 3 elements
let m2 := [[1,1],[2,2]]; matrix of 4x4

; Demo for set operations
let s1 <: {Z} ; empty set of strings

; Initialized set of 3 elements
let s2 := {1, 2, 3} 

;append one element into a set
set s1 += 0 ;{0}
set s1 += 1 ;{0,1}
set s1 += 2 ;{0,1,2}

;remove one element
set s1 -= 1; {0,2}
set s1 -= 2; {0}

;union elements from two sets
put(s1 + s2); {0,1,2,3}

;set literals using type inference
let s3 := {'a','b', 'c'} ; set of 2 elements
let s4 := {'b','c','d'} ; set of 2 elements

;intersection between 2 sets
put (s3 ∪ s4); {'a','b', 'c','d'}
put (s3 ∩ s4); {'b','c'}

;difference between two sets
put (s3 - s4); {'a'}
put (s4 - s3); {'d'}

;end